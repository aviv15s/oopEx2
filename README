aviv.shemesh,ram3108_
213847015,213809957

1. Bricks Implementation:
We chose to use the Brick's collision detection function to check for each collision. each collision is
assured to be by a ball or a puck, because all the bricks are in a single layer (without any other objects)
and that layer can only collide with the layer in which the balls and pucks are.
Each brick has a boolean value that makes sure that it is hit only once (no double collisions).
When the brick is hit it activates its own behaviour (generated at it's creation) and then calls the game
manager's brick removing function. The game manager is responsible for removing bricks because it needs
to hold account of the number of bricks remaining in order to know when the player wins.
This is a good example of encapsulation because the brick object does not need to know that there are other
bricks or that there is a count of them.

2. Graphical and Numerical life implementation:
We created a Graphics class that is responsible for handling UI.
That class initializes the graphical heart counter (by creating gameObjects in the UI layer)
and visualizes the number of hearts both as a text by showing the correct amount of hearts.
The counter is updated by a function in the graphics class that gets the current number of hearts.
This again is a good use of encapsulation because the graphics class does not need to know what are lives
and what happens when a player runs out of them.
The game manager is responsible for holding the current amount of hearts and updating it when the ball goes
out of the screen or when an extra heart is collected. The game manager also activates the code that handles
the state of the player losing (by calling the graphics class to show the Game Over pop-up).

3. Brick Collision Implementation:
Each collision was implemented by a class that extends the basic CollisionStrategy class which is called
when a brick is hit.

Extra Balls: A function in the game manager is called twice. This function creates 2 puck objects (which are
actually an instance of the Ball class with a different tag and image). We chose to implement the pucks as
ball instances instead of creating an extra class because there isn't enough of a difference between the two
objects that justifies another class.

Camera Focus: When such a brick is hit by something it calls a function of the game manager that checks
if the hitting object is the main ball (by tag) and if not it does nothing. It then writes down the number
of collisions that the ball had so far (from its counter) and moves the camera to follow the ball. Each
call to the game manager's update function checks if the ball had so far made at least 4 collisions. If it did
then the camera is returned to position.

Life Recovery: When this brick is hit it calls a function of the game manager that creates a falling heart
object at it's center. The heart object is in a special hearts layer and can only collide with the paddle
layer. When colliding with a paddle the heart checks that it is the main paddle (by tag) and if it is then
a function in the game manager is called that handles the addition of a life (as well as deleting the heart).
Of course we also added the Heart class to handle that object's collisions.

Paddle creation: Again, the game manager handles the additional paddle by first checking if there is already
such a paddle, and only if there isn't, it creates an extra paddle at mid-height of the screen. That paddle
behaves exactly like the main paddle except it has a counter of the times it was hit and it knows to tell
the game manager when the limit has been reached. It is differentiated from the main paddle by tag.

4. Double Behaviour Implementation:
When a Brick object is constructed it makes a call to a special class that is a factory to the collision
strategies (an implementation of the Strategy pillar!). That factory gives it an array (which size is a
constant that is dictated by the maximum amount of double behaviour recursion (only 1 for now!). That array
holds all the CollisionStrategy objects that that brick needs to activate when it is hit.
The factory makes sure that the probabilities are correct and that the amount of double behaviour is correct.


5. API Changes:
Of course we added classes that were not originally in the API because there are more complex behaviours in
this version of the game.
We updated the class Paddle to override onCollisionEnter to be able to check when the paddle hits a ball
or puck in order to know if the paddle needs to be deleted by the game manager (if its an additional one).
In the Game Manager we
